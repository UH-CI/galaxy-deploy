#!/bin/sh
##
## This file is maintained by Ansible - CHANGES WILL BE OVERWRITTEN
##
#
# this is invoked by postgres directly, and should be set as the
# archive_command thusly:
#   archive_command = '/path/to/backup/bin/archive_wal.sh "%p" "%f"'

full_file=$1
file=$2
server=`hostname`

active_dir='{{ postgresql_backup_active_dir }}'
backup_dir="{{ postgresql_backup_dir }}/$server/current/wal"
mutex="{{ postgresql_backup_local_dir }}/walmutex"
mailto='{{ postgresql_backup_mail_recipient }}'
mutex_attempts=50

handler()
{
    command=$@
    out=`$command 2>&1`
    ret=$?
    if [ $ret != 0 ]; then
        (echo "execuing $command failed with code $ret:" ; echo "$out") | mail -s "$server: WAL backup failed" $mailto
        rm -f $mutex
        exit 1
    else
        if [ -n "$out" ]; then
            echo "$out"
        fi
    fi
}

attempt=0

[ ! -d `dirname $mutex` ] && mkdir -p `dirname $mutex`

while [ -f $mutex ]; do
    attempt=`expr $attempt + 1`
    if [ $attempt -gt $mutex_attempts ]; then
        echo "archive of WAL $file failed, timed out waiting for mutex from `cat $mutex`" | mail -s "$server: WAL backup failed" $mailto
        exit 1
    fi
    sleep 5
done

echo "archive-WAL $$" > $mutex

if [ ! -d $backup_dir ]; then
    handler mkdir -p $backup_dir
fi

if [ -f $backup_dir/$file ]; then
    echo "$backup_dir/$file already exists, overwriting is not allowed" | mail -s "$server: WAL backup failed" $mailto
    exit 1
fi

handler rsync -ptg $full_file $backup_dir

handler rm -f $active_dir/*

# debug
#echo "archive of WAL $file succeeded" | mail -s "$server: WAL backup succeeded" $mailto

# exit normally
rm -f $mutex
exit 0
